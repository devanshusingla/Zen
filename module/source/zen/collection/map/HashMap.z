class HashMap

    final DEFAULT_CAPACITY = 16
    final MAX_CAPACITY = 1 << 30
    final DEFAULT_LOAD_FACTOR = 0.75f

    private function addEntry(index, key, value, hashCode)
        var entry = table[index]
        table[index] = new Entry(key, value, hashCode, entry)
        if size++ >= threshold
            resize(2 * table.getSize)

    private function getEntry(key)
        var hashCode = normalize(key.hash)
        var index = getIndex(hashCode, table.getSize)
        // WRONG: for var entry in table
            if entry.hashCode == hashCode and key.equals(key)
                return entry
        return null

    private function hash(hashCode)
        hashCode ^= (hashCode >>> 20) ^ (hashCode >>> 12)
        return hashCode ^ (hashCode >>> 7) ^ (hashCode >>> 4)

    private function getIndex(code, size)
        return code & (size - 1)

    private function resize(newCapacity)
        var oldTable = table
        oldCapacity = table.getSize
        if oldCapacity == MAX_CAPACITY
            threshold = Integer.MAX
        else
            newTable = array(newCapacity)
            var i = 0
            while i < oldCapacity
                var entry = oldTable[i]
                if entry != null
                    function updateEntries
                        var next = entry.next
                        var index = getIndex(entry.hashCode, newCapacity)
                        entry.next = newTable[index]
                        newTable[index] = entry
                        entry = next
                    updateEntries
                    while entry != null
                        updateEntries